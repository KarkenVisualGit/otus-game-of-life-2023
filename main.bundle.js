(()=>{"use strict";var e,n,r={603:(e,n,r)=>{function t(e,n,r){const t=e[r];if(void 0===t)return 0;const o=t[n];return void 0===o?0:o}function o(e,n,r){let o=0;for(let a=e-1;a<=e+1;a+=1)o+=Number(t(r,a,n-1));for(let a=e-1;a<=e+1;a+=1)o+=Number(t(r,a,n+1));return o+=Number(t(r,e-1,n)),o+=Number(t(r,e+1,n)),o}function a(e,n,r){const t=`<table border=2>${n.map(((e,r)=>`<tr>${e.map(((e,t)=>{if(1===e){const e=o(t,r,n);return e<2||e>3?`<td \n          data-x=${t}\n          data-y=${r}\n          class="cell-dying"></td>`:`<td \n        data-x=${t}\n        data-y=${r}\n        class="cell-alive"></td>`}return`<td \n      data-x=${t}\n      data-y=${r}\n      class="cell-dead"></td>`})).join("")}</tr>`)).join("")}</table>`;e.innerHTML=t,e.querySelector("table").addEventListener("click",(e=>{const n=e.target,t=n.getAttribute("data-x"),o=n.getAttribute("data-y");t&&o&&r(Number(t),Number(o))}))}function i(e,n,r){let i,c=!1;r.innerHTML=`\n  <div class="label-elements">\n  <div class="input-wrapper">\n    <label for="gameSpeed">Speed: </label>\n    <input class="gameSpeed" type="range" min="100" max="2000" value="1000" step="100"/>\n  </div>\n  <div class="input-wrapper">\n    <label for="sizeX">Size X: </label>\n    <input class="sizeX" type="number" value="${e}" min="3"/>\n  </div>\n  <div class="input-wrapper">\n    <label for="sizeY">Size Y: </label>\n    <input class="sizeY" type="number" value="${n}" min="3"/>\n  </div>\n  <button class="resizeButton">Resize</button>\n</div>\n  <div class="field-wrapper"></div>\n  <div class="field"><button class="startbutton">Start</button></div>`;const l=r.querySelector(".gameSpeed"),d=r.querySelector(".sizeX"),s=r.querySelector(".sizeY"),u=r.querySelector(".resizeButton");let p=1e3,f=Array.from({length:n}).map((()=>Array.from({length:e}).map((()=>0))));const h=r.querySelector(".field-wrapper"),A=r.querySelector(".startbutton"),m=(e,n)=>{f[n][e]=0===f[n][e]?1:0,a(h,f,m)};function v(){c=!1,A.innerHTML="Start",i&&clearInterval(i)}function g(){f=function(e){return e.map(((n,r)=>n.map(((n,a)=>{const i=o(a,r,e),c=t(e,a,r);var l;return 3===(l=i)?1:l>3||l<2?0:2===l&&1===c?1:0}))))}(f),h&&a(h,f,m),function(e){for(let n=0;n<e.length;n+=1){const r=e[n];for(let e=0;e<r.length;e+=1)if(r[e])return!0}return!1}(f)||(alert("Death on the block"),v())}u.addEventListener("click",(()=>{const e=parseInt(d.value,10),n=parseInt(s.value,10);if(e>f[0].length)for(let n=0;n<f.length;n++)f[n].push(...new Array(e-f[n].length).fill(0));else if(e<f[0].length)for(let n=0;n<f.length;n++)f[n]=f[n].slice(0,e);if(n>f.length){const r=Array.from({length:n-f.length}).map((()=>new Array(e).fill(0)));f.push(...r)}else n<f.length&&(f=f.slice(0,n));a(h,f,m)})),a(h,f,m),A.addEventListener("click",(()=>{c?v():(c=!0,A.innerHTML="Stop",i=setInterval(g,p))})),l.addEventListener("input",(function(){p=parseInt(l.value,10),c&&(clearInterval(i),i=setInterval(g,p))}))}r(962);const c=document.createElement("div"),l=document.createElement("div");document.body.appendChild(c),document.body.appendChild(l),i(5,5,c),i(10,10,l)},402:(e,n,r)=>{r.r(n),r.d(n,{default:()=>c});var t=r(537),o=r.n(t),a=r(645),i=r.n(a)()(o());i.push([e.id,".field-wrapper {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.5;\n  zoom: 2;\n}\n\n.label-elements {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n}\n\n.label-elements > * {\n  margin-bottom: 5px;\n}\n\n.gameSpeed,\n.sizeX,\n.sizeY {\n  margin: 5px;\n}\n\n.gameSpeed {\n  padding: 10px;\n}\n\nlabel {\n  margin-right: 5px;\n}\n\n.resizeButton {\n  zoom: 1.5;\n  margin: 10px;\n}\n\n.startbutton {\n  display: flex;\n  flex-wrap: wrap;\n  align-self: center;\n  zoom: 2;\n}\n\n.field {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n}\n\n.cell-alive {\n  background-color: #036d21;\n  height: 10px;\n  width: 10px;\n}\n\n.cell-dead {\n  background-color: #ffffff;\n  height: 10px;\n  width: 10px;\n}\n\n.cell-dying {\n  background-color: #063dab;\n  height: 10px;\n  width: 10px;\n}\n\n.gameSpeed {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n}\n\n.input-wrapper {\n  display: flex;\n  align-items: center;\n  margin: 5px;\n}\n","",{version:3,sources:["webpack://./src/css/style.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,gBAAgB;EAChB,OAAO;AACT;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,eAAe;EACf,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;;;EAGE,WAAW;AACb;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,SAAS;EACT,YAAY;AACd;;AAEA;EACE,aAAa;EACb,eAAe;EACf,kBAAkB;EAClB,OAAO;AACT;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,yBAAyB;EACzB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,eAAe;EACf,uBAAuB;EACvB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb",sourcesContent:[".field-wrapper {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  line-height: 1.5;\n  zoom: 2;\n}\n\n.label-elements {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n}\n\n.label-elements > * {\n  margin-bottom: 5px;\n}\n\n.gameSpeed,\n.sizeX,\n.sizeY {\n  margin: 5px;\n}\n\n.gameSpeed {\n  padding: 10px;\n}\n\nlabel {\n  margin-right: 5px;\n}\n\n.resizeButton {\n  zoom: 1.5;\n  margin: 10px;\n}\n\n.startbutton {\n  display: flex;\n  flex-wrap: wrap;\n  align-self: center;\n  zoom: 2;\n}\n\n.field {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n}\n\n.cell-alive {\n  background-color: #036d21;\n  height: 10px;\n  width: 10px;\n}\n\n.cell-dead {\n  background-color: #ffffff;\n  height: 10px;\n  width: 10px;\n}\n\n.cell-dying {\n  background-color: #063dab;\n  height: 10px;\n  width: 10px;\n}\n\n.gameSpeed {\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  justify-content: center;\n  align-items: center;\n  padding: 10px;\n}\n\n.input-wrapper {\n  display: flex;\n  align-items: center;\n  margin: 5px;\n}\n"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var r="",t=void 0!==n[5];return n[4]&&(r+="@supports (".concat(n[4],") {")),n[2]&&(r+="@media ".concat(n[2]," {")),t&&(r+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),r+=e(n),t&&(r+="}"),n[2]&&(r+="}"),n[4]&&(r+="}"),r})).join("")},n.i=function(e,r,t,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(t)for(var c=0;c<this.length;c++){var l=this[c][0];null!=l&&(i[l]=!0)}for(var d=0;d<e.length;d++){var s=[].concat(e[d]);t&&i[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),r&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=r):s[2]=r),o&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=o):s[4]="".concat(o)),n.push(s))}},n}},537:e=>{e.exports=function(e){var n=e[1],r=e[3];if(!r)return n;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */");return[n].concat([a]).join("\n")}return[n].join("\n")}},962:(e,n,r)=>{var t=r(379),o=r.n(t),a=r(795),i=r.n(a),c=r(569),l=r.n(c),d=r(565),s=r.n(d),u=r(216),p=r.n(u),f=r(589),h=r.n(f),A=r(402),m={};m.styleTagTransform=h(),m.setAttributes=s(),m.insert=l().bind(null,"head"),m.domAPI=i(),m.insertStyleElement=p();var v=o()(A.default,m);if(!A.default.locals||e.hot.invalidate){var g=!A.default.locals,y=g?A:A.default.locals;e.hot.accept(402,(n=>{A=r(402),function(e,n,r){if(!e&&n||e&&!n)return!1;var t;for(t in e)if((!r||"default"!==t)&&e[t]!==n[t])return!1;for(t in n)if(!(r&&"default"===t||e[t]))return!1;return!0}(y,g?A:A.default.locals,g)?(y=g?A:A.default.locals,v(A.default)):e.hot.invalidate()}))}e.hot.dispose((function(){v()})),A.default&&A.default.locals&&A.default.locals},379:e=>{var n=[];function r(e){for(var r=-1,t=0;t<n.length;t++)if(n[t].identifier===e){r=t;break}return r}function t(e,t){for(var a={},i=[],c=0;c<e.length;c++){var l=e[c],d=t.base?l[0]+t.base:l[0],s=a[d]||0,u="".concat(d," ").concat(s);a[d]=s+1;var p=r(u),f={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)n[p].references++,n[p].updater(f);else{var h=o(f,t);t.byIndex=c,n.splice(c,0,{identifier:u,updater:h,references:1})}i.push(u)}return i}function o(e,n){var r=n.domAPI(n);return r.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;r.update(e=n)}else r.remove()}}e.exports=function(e,o){var a=t(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=r(a[i]);n[c].references--}for(var l=t(e,o),d=0;d<a.length;d++){var s=r(a[d]);0===n[s].references&&(n[s].updater(),n.splice(s,1))}a=l}}},569:e=>{var n={};e.exports=function(e,r){var t=function(e){if(void 0===n[e]){var r=document.querySelector(e);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}n[e]=r}return n[e]}(e);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},565:(e,n,r)=>{e.exports=function(e){var n=r.nc;n&&e.setAttribute("nonce",n)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(r){!function(e,n,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(t,e,n.options)}(n,e,r)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},589:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}}},t={};function o(e){var n=t[e];if(void 0!==n){if(void 0!==n.error)throw n.error;return n.exports}var a=t[e]={id:e,exports:{}};try{var i={id:e,module:a,factory:r[e],require:o};o.i.forEach((function(e){e(i)})),a=i.module,i.factory.call(a.exports,a,a.exports,i.require)}catch(e){throw a.error=e,e}return a.exports}o.m=r,o.c=t,o.i=[],o.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return o.d(n,{a:n}),n},o.d=(e,n)=>{for(var r in n)o.o(n,r)&&!o.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},o.hu=e=>e+"."+o.h()+".hot-update.js",o.hmrF=()=>"main."+o.h()+".hot-update.json",o.h=()=>"c0da0ba5185ab3474bd7",o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),e={},n="otus-game-of-life-2023:",o.l=(r,t,a,i)=>{if(e[r])e[r].push(t);else{var c,l;if(void 0!==a)for(var d=document.getElementsByTagName("script"),s=0;s<d.length;s++){var u=d[s];if(u.getAttribute("src")==r||u.getAttribute("data-webpack")==n+a){c=u;break}}c||(l=!0,(c=document.createElement("script")).charset="utf-8",c.timeout=120,o.nc&&c.setAttribute("nonce",o.nc),c.setAttribute("data-webpack",n+a),c.src=r),e[r]=[t];var p=(n,t)=>{c.onerror=c.onload=null,clearTimeout(f);var o=e[r];if(delete e[r],c.parentNode&&c.parentNode.removeChild(c),o&&o.forEach((e=>e(t))),n)return n(t)},f=setTimeout(p.bind(null,void 0,{type:"timeout",target:c}),12e4);c.onerror=p.bind(null,c.onerror),c.onload=p.bind(null,c.onload),l&&document.head.appendChild(c)}},o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e,n,r,t={},a=o.c,i=[],c=[],l="idle",d=0,s=[];function u(e){l=e;for(var n=[],r=0;r<c.length;r++)n[r]=c[r].call(null,e);return Promise.all(n)}function p(){0==--d&&u("ready").then((function(){if(0===d){var e=s;s=[];for(var n=0;n<e.length;n++)e[n]()}}))}function f(e){if("idle"!==l)throw new Error("check() is only allowed in idle status");return u("check").then(o.hmrM).then((function(r){return r?u("prepare").then((function(){var t=[];return n=[],Promise.all(Object.keys(o.hmrC).reduce((function(e,a){return o.hmrC[a](r.c,r.r,r.m,e,n,t),e}),[])).then((function(){return n=function(){return e?A(e):u("ready").then((function(){return t}))},0===d?n():new Promise((function(e){s.push((function(){e(n())}))}));var n}))})):u(m()?"ready":"idle").then((function(){return null}))}))}function h(e){return"ready"!==l?Promise.resolve().then((function(){throw new Error("apply() is only allowed in ready status (state: "+l+")")})):A(e)}function A(e){e=e||{},m();var t=n.map((function(n){return n(e)}));n=void 0;var o=t.map((function(e){return e.error})).filter(Boolean);if(o.length>0)return u("abort").then((function(){throw o[0]}));var a=u("dispose");t.forEach((function(e){e.dispose&&e.dispose()}));var i,c=u("apply"),l=function(e){i||(i=e)},d=[];return t.forEach((function(e){if(e.apply){var n=e.apply(l);if(n)for(var r=0;r<n.length;r++)d.push(n[r])}})),Promise.all([a,c]).then((function(){return i?u("fail").then((function(){throw i})):r?A(e).then((function(e){return d.forEach((function(n){e.indexOf(n)<0&&e.push(n)})),e})):u("idle").then((function(){return d}))}))}function m(){if(r)return n||(n=[]),Object.keys(o.hmrI).forEach((function(e){r.forEach((function(r){o.hmrI[e](r,n)}))})),r=void 0,!0}o.hmrD=t,o.i.push((function(s){var A,m,v,g,y=s.module,b=function(n,r){var t=a[r];if(!t)return n;var o=function(o){if(t.hot.active){if(a[o]){var c=a[o].parents;-1===c.indexOf(r)&&c.push(r)}else i=[r],e=o;-1===t.children.indexOf(o)&&t.children.push(o)}else console.warn("[HMR] unexpected require("+o+") from disposed module "+r),i=[];return n(o)},c=function(e){return{configurable:!0,enumerable:!0,get:function(){return n[e]},set:function(r){n[e]=r}}};for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&"e"!==s&&Object.defineProperty(o,s,c(s));return o.e=function(e){return function(e){switch(l){case"ready":u("prepare");case"prepare":return d++,e.then(p,p),e;default:return e}}(n.e(e))},o}(s.require,s.id);y.hot=(A=s.id,m=y,g={_acceptedDependencies:{},_acceptedErrorHandlers:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:v=e!==A,_requireSelf:function(){i=m.parents.slice(),e=v?void 0:A,o(A)},active:!0,accept:function(e,n,r){if(void 0===e)g._selfAccepted=!0;else if("function"==typeof e)g._selfAccepted=e;else if("object"==typeof e&&null!==e)for(var t=0;t<e.length;t++)g._acceptedDependencies[e[t]]=n||function(){},g._acceptedErrorHandlers[e[t]]=r;else g._acceptedDependencies[e]=n||function(){},g._acceptedErrorHandlers[e]=r},decline:function(e){if(void 0===e)g._selfDeclined=!0;else if("object"==typeof e&&null!==e)for(var n=0;n<e.length;n++)g._declinedDependencies[e[n]]=!0;else g._declinedDependencies[e]=!0},dispose:function(e){g._disposeHandlers.push(e)},addDisposeHandler:function(e){g._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=g._disposeHandlers.indexOf(e);n>=0&&g._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":n=[],Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](A,n)})),u("ready");break;case"ready":Object.keys(o.hmrI).forEach((function(e){o.hmrI[e](A,n)}));break;case"prepare":case"check":case"dispose":case"apply":(r=r||[]).push(A)}},check:f,apply:h,status:function(e){if(!e)return l;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var n=c.indexOf(e);n>=0&&c.splice(n,1)},data:t[A]},e=void 0,g),y.parents=i,y.children=[],i=[],s.require=b})),o.hmrC={},o.hmrI={}})(),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var n=o.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var r=n.getElementsByTagName("script");if(r.length)for(var t=r.length-1;t>-1&&!e;)e=r[t--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e,n,r,t,a,i=o.hmrS_jsonp=o.hmrS_jsonp||{179:0},c={};function l(n,r){return e=r,new Promise(((e,r)=>{c[n]=e;var t=o.p+o.hu(n),a=new Error;o.l(t,(e=>{if(c[n]){c[n]=void 0;var t=e&&("load"===e.type?"missing":e.type),o=e&&e.target&&e.target.src;a.message="Loading hot update chunk "+n+" failed.\n("+t+": "+o+")",a.name="ChunkLoadError",a.type=t,a.request=o,r(a)}}))}))}function d(e){function c(e){for(var n=[e],r={},t=n.map((function(e){return{chain:[e],id:e}}));t.length>0;){var a=t.pop(),i=a.id,c=a.chain,d=o.c[i];if(d&&(!d.hot._selfAccepted||d.hot._selfInvalidated)){if(d.hot._selfDeclined)return{type:"self-declined",chain:c,moduleId:i};if(d.hot._main)return{type:"unaccepted",chain:c,moduleId:i};for(var s=0;s<d.parents.length;s++){var u=d.parents[s],p=o.c[u];if(p){if(p.hot._declinedDependencies[i])return{type:"declined",chain:c.concat([u]),moduleId:i,parentId:u};-1===n.indexOf(u)&&(p.hot._acceptedDependencies[i]?(r[u]||(r[u]=[]),l(r[u],[i])):(delete r[u],n.push(u),t.push({chain:c.concat([u]),id:u})))}}}}return{type:"accepted",moduleId:e,outdatedModules:n,outdatedDependencies:r}}function l(e,n){for(var r=0;r<n.length;r++){var t=n[r];-1===e.indexOf(t)&&e.push(t)}}o.f&&delete o.f.jsonpHmr,n=void 0;var d={},s=[],u={},p=function(e){console.warn("[HMR] unexpected require("+e.id+") to disposed module")};for(var f in r)if(o.o(r,f)){var h,A=r[f],m=!1,v=!1,g=!1,y="";switch((h=A?c(f):{type:"disposed",moduleId:f}).chain&&(y="\nUpdate propagation: "+h.chain.join(" -> ")),h.type){case"self-declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of self decline: "+h.moduleId+y));break;case"declined":e.onDeclined&&e.onDeclined(h),e.ignoreDeclined||(m=new Error("Aborted because of declined dependency: "+h.moduleId+" in "+h.parentId+y));break;case"unaccepted":e.onUnaccepted&&e.onUnaccepted(h),e.ignoreUnaccepted||(m=new Error("Aborted because "+f+" is not accepted"+y));break;case"accepted":e.onAccepted&&e.onAccepted(h),v=!0;break;case"disposed":e.onDisposed&&e.onDisposed(h),g=!0;break;default:throw new Error("Unexception type "+h.type)}if(m)return{error:m};if(v)for(f in u[f]=A,l(s,h.outdatedModules),h.outdatedDependencies)o.o(h.outdatedDependencies,f)&&(d[f]||(d[f]=[]),l(d[f],h.outdatedDependencies[f]));g&&(l(s,[h.moduleId]),u[f]=p)}r=void 0;for(var b,E=[],x=0;x<s.length;x++){var w=s[x],C=o.c[w];C&&(C.hot._selfAccepted||C.hot._main)&&u[w]!==p&&!C.hot._selfInvalidated&&E.push({module:w,require:C.hot._requireSelf,errorHandler:C.hot._selfAccepted})}return{dispose:function(){var e;t.forEach((function(e){delete i[e]})),t=void 0;for(var n,r=s.slice();r.length>0;){var a=r.pop(),c=o.c[a];if(c){var l={},u=c.hot._disposeHandlers;for(x=0;x<u.length;x++)u[x].call(null,l);for(o.hmrD[a]=l,c.hot.active=!1,delete o.c[a],delete d[a],x=0;x<c.children.length;x++){var p=o.c[c.children[x]];p&&(e=p.parents.indexOf(a))>=0&&p.parents.splice(e,1)}}}for(var f in d)if(o.o(d,f)&&(c=o.c[f]))for(b=d[f],x=0;x<b.length;x++)n=b[x],(e=c.children.indexOf(n))>=0&&c.children.splice(e,1)},apply:function(n){for(var r in u)o.o(u,r)&&(o.m[r]=u[r]);for(var t=0;t<a.length;t++)a[t](o);for(var i in d)if(o.o(d,i)){var c=o.c[i];if(c){b=d[i];for(var l=[],p=[],f=[],h=0;h<b.length;h++){var A=b[h],m=c.hot._acceptedDependencies[A],v=c.hot._acceptedErrorHandlers[A];if(m){if(-1!==l.indexOf(m))continue;l.push(m),p.push(v),f.push(A)}}for(var g=0;g<l.length;g++)try{l[g].call(null,b)}catch(r){if("function"==typeof p[g])try{p[g](r,{moduleId:i,dependencyId:f[g]})}catch(t){e.onErrored&&e.onErrored({type:"accept-error-handler-errored",moduleId:i,dependencyId:f[g],error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"accept-errored",moduleId:i,dependencyId:f[g],error:r}),e.ignoreErrored||n(r)}}}for(var y=0;y<E.length;y++){var x=E[y],w=x.module;try{x.require(w)}catch(r){if("function"==typeof x.errorHandler)try{x.errorHandler(r,{moduleId:w,module:o.c[w]})}catch(t){e.onErrored&&e.onErrored({type:"self-accept-error-handler-errored",moduleId:w,error:t,originalError:r}),e.ignoreErrored||(n(t),n(r))}else e.onErrored&&e.onErrored({type:"self-accept-errored",moduleId:w,error:r}),e.ignoreErrored||n(r)}}return s}}}self.webpackHotUpdateotus_game_of_life_2023=(n,t,i)=>{for(var l in t)o.o(t,l)&&(r[l]=t[l],e&&e.push(l));i&&a.push(i),c[n]&&(c[n](),c[n]=void 0)},o.hmrI.jsonp=function(e,n){r||(r={},a=[],t=[],n.push(d)),o.o(r,e)||(r[e]=o.m[e])},o.hmrC.jsonp=function(e,c,s,u,p,f){p.push(d),n={},t=c,r=s.reduce((function(e,n){return e[n]=!1,e}),{}),a=[],e.forEach((function(e){o.o(i,e)&&void 0!==i[e]?(u.push(l(e,f)),n[e]=!0):n[e]=!1})),o.f&&(o.f.jsonpHmr=function(e,r){n&&o.o(n,e)&&!n[e]&&(r.push(l(e)),n[e]=!0)})},o.hmrM=()=>{if("undefined"==typeof fetch)throw new Error("No browser support: need fetch API");return fetch(o.p+o.hmrF()).then((e=>{if(404!==e.status){if(!e.ok)throw new Error("Failed to fetch update manifest "+e.statusText);return e.json()}}))}})(),o.nc=void 0,o(603)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,